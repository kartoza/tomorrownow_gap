# Generated by Django 4.2.7 on 2025-05-12 08:08

from django.db import migrations, models, connection
from django.conf import settings
import gap.models.crop_insight


def replace_column_prefix(old_prefix, new_prefix):
    query = f"""
        UPDATE gap_cropinsightrequest
        SET file = regexp_replace(file, %s, %s)
        WHERE file LIKE %s
    """
    params = [f'^{old_prefix}', new_prefix, f'{old_prefix}%']

    with connection.cursor() as cursor:
        cursor.execute(query, params)


def migrate_crop_insight_file(apps, schema_editor):
    """Migrate the file path for CropInsightRequest model."""
    dir_prefix = settings.STORAGE_DIR_PREFIX
    gap_products_dir_prefix = settings.GAP_PRODUCTS_DIR_PREFIX
    replace_column_prefix(
        f'{dir_prefix}crop-insight/',
        f'{gap_products_dir_prefix}crop-insight/'
    )


def revert_crop_insight_file(apps, schema_editor):
    """Revert the file path for CropInsightRequest model."""
    dir_prefix = settings.STORAGE_DIR_PREFIX
    gap_products_dir_prefix = settings.GAP_PRODUCTS_DIR_PREFIX
    replace_column_prefix(
        f'{gap_products_dir_prefix}crop-insight/',
        f'{dir_prefix}crop-insight/'
    )


class Migration(migrations.Migration):

    dependencies = [
        ('gap', '0057_alter_collectorsession_ingestor_type_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cropinsightrequest',
            name='file',
            field=models.FileField(blank=True, null=True, storage=gap.models.crop_insight.crop_insight_storage, upload_to=gap.models.crop_insight.ingestor_file_path),
        ),
        migrations.RunPython(
            migrate_crop_insight_file,
            reverse_code=revert_crop_insight_file
        ),
    ]
